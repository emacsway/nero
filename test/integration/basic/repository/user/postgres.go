// Code generated by nero, DO NOT EDIT.
package user

import (
	"context"
	"database/sql"
	sq "github.com/Masterminds/squirrel"
	_ "github.com/lib/pq"
	errors "github.com/pkg/errors"
	zerolog "github.com/rs/zerolog"
	nero "github.com/sf9v/nero"
	aggregate "github.com/sf9v/nero/aggregate"
	predicate "github.com/sf9v/nero/predicate"
	sort "github.com/sf9v/nero/sort"
	user "github.com/sf9v/nero/test/integration/basic/user"
	"io"
	"reflect"
)

type PostgreSQLRepository struct {
	db  *sql.DB
	log *zerolog.Logger
}

var _ = Repository(&PostgreSQLRepository{})

func NewPostgreSQLRepository(db *sql.DB) *PostgreSQLRepository {
	return &PostgreSQLRepository{
		db: db,
	}
}

func (pg *PostgreSQLRepository) Debug(out io.Writer) *PostgreSQLRepository {
	lg := zerolog.New(out).With().Timestamp().Logger()
	return &PostgreSQLRepository{
		db:  pg.db,
		log: &lg,
	}
}

func (pg *PostgreSQLRepository) Tx(ctx context.Context) (nero.Tx, error) {
	return pg.db.BeginTx(ctx, nil)
}

func (pg *PostgreSQLRepository) Create(ctx context.Context, c *Creator) (string, error) {
	tx, err := pg.Tx(ctx)
	if err != nil {
		return "", err
	}

	id, err := pg.CreateTx(ctx, tx, c)
	if err != nil {
		return "", rollback(tx, err)
	}

	return id, tx.Commit()
}

func (pg *PostgreSQLRepository) CreateMany(ctx context.Context, cs ...*Creator) error {
	tx, err := pg.Tx(ctx)
	if err != nil {
		return err
	}

	err = pg.CreateManyTx(ctx, tx, cs...)
	if err != nil {
		return rollback(tx, err)
	}

	return tx.Commit()
}

func (pg *PostgreSQLRepository) CreateTx(ctx context.Context, tx nero.Tx, c *Creator) (string, error) {
	txx, ok := tx.(*sql.Tx)
	if !ok {
		return "", errors.New("expecting tx to be *sql.Tx")
	}

	qb := sq.Insert(c.collection).
		Columns(c.columns...).
		Values(c.uID, c.email, c.name, c.age, c.group, c.kv, c.updatedAt).
		Suffix("RETURNING \"id\"").
		PlaceholderFormat(sq.Dollar).
		RunWith(txx)
	if log := pg.log; log != nil {
		sql, args, err := qb.ToSql()
		log.Debug().Str("op", "Create").Str("stmnt", sql).
			Interface("args", args).Err(err).Msg("")
	}

	var id string
	err := qb.QueryRowContext(ctx).Scan(&id)
	if err != nil {
		return "", err
	}

	return id, nil
}

func (pg *PostgreSQLRepository) CreateManyTx(ctx context.Context, tx nero.Tx, cs ...*Creator) error {
	if len(cs) == 0 {
		return nil
	}

	txx, ok := tx.(*sql.Tx)
	if !ok {
		return errors.New("expecting tx to be *sql.Tx")
	}

	qb := sq.Insert(cs[0].collection).
		Columns(cs[0].columns...)
	for _, c := range cs {
		qb = qb.Values(c.uID, c.email, c.name, c.age, c.group, c.kv, c.updatedAt)
	}

	qb = qb.Suffix("RETURNING \"id\"").
		PlaceholderFormat(sq.Dollar)
	if log := pg.log; log != nil {
		sql, args, err := qb.ToSql()
		log.Debug().Str("op", "CreateMany").Str("stmnt", sql).
			Interface("args", args).Err(err).Msg("")
	}

	_, err := qb.RunWith(txx).ExecContext(ctx)
	if err != nil {
		return err
	}

	return nil
}

func (pg *PostgreSQLRepository) Query(ctx context.Context, q *Queryer) ([]*user.User, error) {
	tx, err := pg.Tx(ctx)
	if err != nil {
		return nil, err
	}

	list, err := pg.QueryTx(ctx, tx, q)
	if err != nil {
		return nil, rollback(tx, err)
	}

	return list, tx.Commit()
}

func (pg *PostgreSQLRepository) QueryOne(ctx context.Context, q *Queryer) (*user.User, error) {
	tx, err := pg.Tx(ctx)
	if err != nil {
		return nil, err
	}

	item, err := pg.QueryOneTx(ctx, tx, q)
	if err != nil {
		return nil, rollback(tx, err)
	}

	return item, tx.Commit()
}

func (pg *PostgreSQLRepository) QueryTx(ctx context.Context, tx nero.Tx, q *Queryer) ([]*user.User, error) {
	txx, ok := tx.(*sql.Tx)
	if !ok {
		return nil, errors.New("expecting tx to be *sql.Tx")
	}

	qb := pg.buildSelect(q)
	if log := pg.log; log != nil {
		sql, args, err := qb.ToSql()
		log.Debug().Str("op", "Query").Str("stmnt", sql).
			Interface("args", args).Err(err).Msg("")
	}

	rows, err := qb.RunWith(txx).QueryContext(ctx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	list := []*user.User{}
	for rows.Next() {
		var item user.User
		err = rows.Scan(
			&item.ID,
			&item.UID,
			&item.Email,
			&item.Name,
			&item.Age,
			&item.Group,
			&item.Kv,
			&item.UpdatedAt,
			&item.CreatedAt,
		)
		if err != nil {
			return nil, err
		}

		list = append(list, &item)
	}

	return list, nil
}

func (pg *PostgreSQLRepository) QueryOneTx(ctx context.Context, tx nero.Tx, q *Queryer) (*user.User, error) {
	txx, ok := tx.(*sql.Tx)
	if !ok {
		return nil, errors.New("expecting tx to be *sql.Tx")
	}

	qb := pg.buildSelect(q)
	if log := pg.log; log != nil {
		sql, args, err := qb.ToSql()
		log.Debug().Str("op", "One").Str("stmnt", sql).
			Interface("args", args).Err(err).Msg("")
	}

	var item user.User
	err := qb.RunWith(txx).
		QueryRowContext(ctx).
		Scan(
			&item.ID,
			&item.UID,
			&item.Email,
			&item.Name,
			&item.Age,
			&item.Group,
			&item.Kv,
			&item.UpdatedAt,
			&item.CreatedAt,
		)
	if err != nil {
		return nil, err
	}

	return &item, nil
}

func (pg *PostgreSQLRepository) buildSelect(q *Queryer) sq.SelectBuilder {
	qb := sq.Select(q.columns...).
		From(q.collection).
		PlaceholderFormat(sq.Dollar)

	pb := &predicate.Predicates{}
	for _, pf := range q.pfs {
		pf(pb)
	}
	for _, p := range pb.All() {
		switch p.Op {
		case predicate.Eq:
			qb = qb.Where(sq.Eq{
				p.Col: p.Val,
			})
		case predicate.NotEq:
			qb = qb.Where(sq.NotEq{
				p.Col: p.Val,
			})
		case predicate.Gt:
			qb = qb.Where(sq.Gt{
				p.Col: p.Val,
			})
		case predicate.GtOrEq:
			qb = qb.Where(sq.GtOrEq{
				p.Col: p.Val,
			})
		case predicate.Lt:
			qb = qb.Where(sq.Lt{
				p.Col: p.Val,
			})
		case predicate.LtOrEq:
			qb = qb.Where(sq.LtOrEq{
				p.Col: p.Val,
			})
		}
	}

	sorts := &sort.Sorts{}
	for _, sf := range q.sfs {
		sf(sorts)
	}
	for _, s := range sorts.All() {
		col := s.Col
		switch s.Direction {
		case sort.Asc:
			qb = qb.OrderBy(col + " ASC")
		case sort.Desc:
			qb = qb.OrderBy(col + " DESC")
		}
	}

	if q.limit > 0 {
		qb = qb.Limit(q.limit)
	}

	if q.offset > 0 {
		qb = qb.Offset(q.offset)
	}

	return qb
}

func (pg *PostgreSQLRepository) Update(ctx context.Context, u *Updater) (int64, error) {
	tx, err := pg.Tx(ctx)
	if err != nil {
		return 0, err
	}

	rowsAffected, err := pg.UpdateTx(ctx, tx, u)
	if err != nil {
		return 0, rollback(tx, err)
	}

	return rowsAffected, tx.Commit()
}

func (pg *PostgreSQLRepository) UpdateTx(ctx context.Context, tx nero.Tx, u *Updater) (int64, error) {
	txx, ok := tx.(*sql.Tx)
	if !ok {
		return 0, errors.New("expecting tx to be *sql.Tx")
	}

	pb := &predicate.Predicates{}
	for _, pf := range u.pfs {
		pf(pb)
	}

	qb := sq.Update(u.collection).
		PlaceholderFormat(sq.Dollar)
	if u.uID != [16]uint8{} {
		qb = qb.Set("uid", u.uID)
	}
	if u.email != nil {
		qb = qb.Set("email", u.email)
	}
	if u.name != nil {
		qb = qb.Set("name", u.name)
	}
	if u.age != 0 {
		qb = qb.Set("age", u.age)
	}
	if u.group != "" {
		qb = qb.Set("group_res", u.group)
	}
	if u.kv != nil {
		qb = qb.Set("kv", u.kv)
	}
	if u.updatedAt != nil {
		qb = qb.Set("updated_at", u.updatedAt)
	}

	for _, p := range pb.All() {
		switch p.Op {
		case predicate.Eq:
			qb = qb.Where(sq.Eq{
				p.Col: p.Val,
			})
		case predicate.NotEq:
			qb = qb.Where(sq.NotEq{
				p.Col: p.Val,
			})
		case predicate.Gt:
			qb = qb.Where(sq.Gt{
				p.Col: p.Val,
			})
		case predicate.GtOrEq:
			qb = qb.Where(sq.GtOrEq{
				p.Col: p.Val,
			})
		case predicate.Lt:
			qb = qb.Where(sq.Lt{
				p.Col: p.Val,
			})
		case predicate.LtOrEq:
			qb = qb.Where(sq.LtOrEq{
				p.Col: p.Val,
			})
		}
	}
	if log := pg.log; log != nil {
		sql, args, err := qb.ToSql()
		log.Debug().Str("op", "Update").Str("stmnt", sql).
			Interface("args", args).Err(err).Msg("")
	}

	res, err := qb.RunWith(txx).ExecContext(ctx)
	if err != nil {
		return 0, err
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return rowsAffected, nil
}

func (pg *PostgreSQLRepository) Delete(ctx context.Context, d *Deleter) (int64, error) {
	tx, err := pg.Tx(ctx)
	if err != nil {
		return 0, err
	}

	rowsAffected, err := pg.DeleteTx(ctx, tx, d)
	if err != nil {
		return 0, rollback(tx, err)
	}

	return rowsAffected, tx.Commit()
}

func (pg *PostgreSQLRepository) DeleteTx(ctx context.Context, tx nero.Tx, d *Deleter) (int64, error) {
	txx, ok := tx.(*sql.Tx)
	if !ok {
		return 0, errors.New("expecting tx to be *sql.Tx")
	}

	pb := &predicate.Predicates{}
	for _, pf := range d.pfs {
		pf(pb)
	}

	qb := sq.Delete(d.collection).
		PlaceholderFormat(sq.Dollar).
		RunWith(txx)
	for _, p := range pb.All() {
		switch p.Op {
		case predicate.Eq:
			qb = qb.Where(sq.Eq{
				p.Col: p.Val,
			})
		case predicate.NotEq:
			qb = qb.Where(sq.NotEq{
				p.Col: p.Val,
			})
		case predicate.Gt:
			qb = qb.Where(sq.Gt{
				p.Col: p.Val,
			})
		case predicate.GtOrEq:
			qb = qb.Where(sq.GtOrEq{
				p.Col: p.Val,
			})
		case predicate.Lt:
			qb = qb.Where(sq.Lt{
				p.Col: p.Val,
			})
		case predicate.LtOrEq:
			qb = qb.Where(sq.LtOrEq{
				p.Col: p.Val,
			})
		}
	}
	if log := pg.log; log != nil {
		sql, args, err := qb.ToSql()
		log.Debug().Str("op", "Delete").Str("stmnt", sql).
			Interface("args", args).Err(err).Msg("")
	}

	res, err := qb.ExecContext(ctx)
	if err != nil {
		return 0, err
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return rowsAffected, nil
}

func (pg *PostgreSQLRepository) Aggregate(ctx context.Context, a *Aggregator) error {
	tx, err := pg.Tx(ctx)
	if err != nil {
		return err
	}

	err = pg.AggregateTx(ctx, tx, a)
	if err != nil {
		return rollback(tx, err)
	}

	return tx.Commit()
}

func (pg *PostgreSQLRepository) AggregateTx(ctx context.Context, tx nero.Tx, a *Aggregator) error {
	txx, ok := tx.(*sql.Tx)
	if !ok {
		return errors.New("expecting tx to be *sql.Tx")
	}

	aggs := &aggregate.Aggregates{}
	for _, aggf := range a.aggfs {
		aggf(aggs)
	}
	cols := []string{}
	for _, agg := range aggs.All() {
		col := agg.Col
		switch agg.Fn {
		case aggregate.Avg:
			cols = append(cols, "AVG("+col+") avg_"+col)
		case aggregate.Count:
			cols = append(cols, "COUNT("+col+") count_"+col)
		case aggregate.Max:
			cols = append(cols, "MAX("+col+") max_"+col)
		case aggregate.Min:
			cols = append(cols, "MIN("+col+") min_"+col)
		case aggregate.Sum:
			cols = append(cols, "SUM("+col+") sum_"+col)
		case aggregate.None:
			cols = append(cols, col)
		}
	}

	qb := sq.Select(cols...).
		From(a.collection).
		PlaceholderFormat(sq.Dollar)

	groups := []string{}
	for _, group := range a.groups {
		groups = append(groups, group.String())
	}
	qb = qb.GroupBy(groups...)

	preds := &predicate.Predicates{}
	for _, pf := range a.pfs {
		pf(preds)
	}
	for _, p := range preds.All() {
		switch p.Op {
		case predicate.Eq:
			qb = qb.Where(sq.Eq{
				p.Col: p.Val,
			})
		case predicate.NotEq:
			qb = qb.Where(sq.NotEq{
				p.Col: p.Val,
			})
		case predicate.Gt:
			qb = qb.Where(sq.Gt{
				p.Col: p.Val,
			})
		case predicate.GtOrEq:
			qb = qb.Where(sq.GtOrEq{
				p.Col: p.Val,
			})
		case predicate.Lt:
			qb = qb.Where(sq.Lt{
				p.Col: p.Val,
			})
		case predicate.LtOrEq:
			qb = qb.Where(sq.LtOrEq{
				p.Col: p.Val,
			})
		}
	}

	sorts := &sort.Sorts{}
	for _, sf := range a.sfs {
		sf(sorts)
	}
	for _, s := range sorts.All() {
		col := s.Col
		switch s.Direction {
		case sort.Asc:
			qb = qb.OrderBy(col + " ASC")
		case sort.Desc:
			qb = qb.OrderBy(col + " DESC")
		}
	}

	if log := pg.log; log != nil {
		sql, args, err := qb.ToSql()
		log.Debug().Str("op", "Aggregate").Str("stmnt", sql).
			Interface("args", args).Err(err).Msg("")
	}

	rows, err := qb.RunWith(txx).QueryContext(ctx)
	if err != nil {
		return err
	}
	defer rows.Close()

	dv := reflect.ValueOf(a.dest).Elem()
	dt := reflect.TypeOf(dv.Interface()).Elem()
	if dt.NumField() != len(cols) {
		return errors.New("aggregate columns and destination struct field count should match")
	}

	for rows.Next() {
		de := reflect.New(dt).Elem()
		dest := make([]interface{}, de.NumField())
		for i := 0; i < de.NumField(); i++ {
			dest[i] = de.Field(i).Addr().Interface()
		}

		err = rows.Scan(dest...)
		if err != nil {
			return err
		}

		dv.Set(reflect.Append(dv, de))
	}

	return nil
}
