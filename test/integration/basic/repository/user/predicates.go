// Code generated by nero, DO NOT EDIT.
package user

import (
	predicate "github.com/sf9v/nero/predicate"
	"time"
)

type PredFunc func(*predicate.Predicates)

func IDEq(id string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "id",
			Op:  predicate.Eq,
			Val: id,
		})
	}
}

func IDNotEq(id string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "id",
			Op:  predicate.NotEq,
			Val: id,
		})
	}
}

func IDGt(id string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "id",
			Op:  predicate.Gt,
			Val: id,
		})
	}
}

func IDGtOrEq(id string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "id",
			Op:  predicate.GtOrEq,
			Val: id,
		})
	}
}

func IDLt(id string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "id",
			Op:  predicate.Lt,
			Val: id,
		})
	}
}

func IDLtOrEq(id string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "id",
			Op:  predicate.LtOrEq,
			Val: id,
		})
	}
}

func EmailEq(email *string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "email",
			Op:  predicate.Eq,
			Val: email,
		})
	}
}

func EmailNotEq(email *string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "email",
			Op:  predicate.NotEq,
			Val: email,
		})
	}
}

func EmailGt(email *string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "email",
			Op:  predicate.Gt,
			Val: email,
		})
	}
}

func EmailGtOrEq(email *string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "email",
			Op:  predicate.GtOrEq,
			Val: email,
		})
	}
}

func EmailLt(email *string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "email",
			Op:  predicate.Lt,
			Val: email,
		})
	}
}

func EmailLtOrEq(email *string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "email",
			Op:  predicate.LtOrEq,
			Val: email,
		})
	}
}

func NameEq(name *string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "name",
			Op:  predicate.Eq,
			Val: name,
		})
	}
}

func NameNotEq(name *string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "name",
			Op:  predicate.NotEq,
			Val: name,
		})
	}
}

func NameGt(name *string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "name",
			Op:  predicate.Gt,
			Val: name,
		})
	}
}

func NameGtOrEq(name *string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "name",
			Op:  predicate.GtOrEq,
			Val: name,
		})
	}
}

func NameLt(name *string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "name",
			Op:  predicate.Lt,
			Val: name,
		})
	}
}

func NameLtOrEq(name *string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "name",
			Op:  predicate.LtOrEq,
			Val: name,
		})
	}
}

func AgeEq(age int) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "age",
			Op:  predicate.Eq,
			Val: age,
		})
	}
}

func AgeNotEq(age int) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "age",
			Op:  predicate.NotEq,
			Val: age,
		})
	}
}

func AgeGt(age int) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "age",
			Op:  predicate.Gt,
			Val: age,
		})
	}
}

func AgeGtOrEq(age int) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "age",
			Op:  predicate.GtOrEq,
			Val: age,
		})
	}
}

func AgeLt(age int) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "age",
			Op:  predicate.Lt,
			Val: age,
		})
	}
}

func AgeLtOrEq(age int) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "age",
			Op:  predicate.LtOrEq,
			Val: age,
		})
	}
}

func GroupEq(group string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "group_res",
			Op:  predicate.Eq,
			Val: group,
		})
	}
}

func GroupNotEq(group string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "group_res",
			Op:  predicate.NotEq,
			Val: group,
		})
	}
}

func GroupGt(group string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "group_res",
			Op:  predicate.Gt,
			Val: group,
		})
	}
}

func GroupGtOrEq(group string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "group_res",
			Op:  predicate.GtOrEq,
			Val: group,
		})
	}
}

func GroupLt(group string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "group_res",
			Op:  predicate.Lt,
			Val: group,
		})
	}
}

func GroupLtOrEq(group string) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "group_res",
			Op:  predicate.LtOrEq,
			Val: group,
		})
	}
}

func UpdatedAtEq(updatedAt *time.Time) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "updated_at",
			Op:  predicate.Eq,
			Val: updatedAt,
		})
	}
}

func UpdatedAtNotEq(updatedAt *time.Time) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "updated_at",
			Op:  predicate.NotEq,
			Val: updatedAt,
		})
	}
}

func UpdatedAtGt(updatedAt *time.Time) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "updated_at",
			Op:  predicate.Gt,
			Val: updatedAt,
		})
	}
}

func UpdatedAtGtOrEq(updatedAt *time.Time) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "updated_at",
			Op:  predicate.GtOrEq,
			Val: updatedAt,
		})
	}
}

func UpdatedAtLt(updatedAt *time.Time) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "updated_at",
			Op:  predicate.Lt,
			Val: updatedAt,
		})
	}
}

func UpdatedAtLtOrEq(updatedAt *time.Time) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "updated_at",
			Op:  predicate.LtOrEq,
			Val: updatedAt,
		})
	}
}

func CreatedAtEq(createdAt *time.Time) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "created_at",
			Op:  predicate.Eq,
			Val: createdAt,
		})
	}
}

func CreatedAtNotEq(createdAt *time.Time) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "created_at",
			Op:  predicate.NotEq,
			Val: createdAt,
		})
	}
}

func CreatedAtGt(createdAt *time.Time) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "created_at",
			Op:  predicate.Gt,
			Val: createdAt,
		})
	}
}

func CreatedAtGtOrEq(createdAt *time.Time) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "created_at",
			Op:  predicate.GtOrEq,
			Val: createdAt,
		})
	}
}

func CreatedAtLt(createdAt *time.Time) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "created_at",
			Op:  predicate.Lt,
			Val: createdAt,
		})
	}
}

func CreatedAtLtOrEq(createdAt *time.Time) PredFunc {
	return func(pb *predicate.Predicates) {
		pb.Add(&predicate.Predicate{
			Col: "created_at",
			Op:  predicate.LtOrEq,
			Val: createdAt,
		})
	}
}
