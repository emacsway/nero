package gen

import (
	"bytes"
	"strings"

	"github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"
	"github.com/pkg/errors"

	"github.com/sf9v/nero"
	gen "github.com/sf9v/nero/gen/internal"
	"github.com/sf9v/nero/gen/pg"
	"github.com/sf9v/nero/gen/sqlite"
)

const (
	pkgPath = "github.com/sf9v/nero"
	sqPkg   = "github.com/Masterminds/squirrel"
	header  = "Code generated by nero, DO NOT EDIT."
)

// Generate generates the repository and returns the output files
func Generate(schemaer nero.Schemaer) (Files, error) {
	schema, err := gen.BuildSchema(schemaer)
	if err != nil {
		return nil, err
	}

	pkgName := strings.ToLower(schema.Pkg)
	pkgFile := jen.NewFile(pkgName)
	pkgFile.Const().Defs(
		jen.Id("collection").Op("=").Lit(schema.Coln),
	)

	fls := []*File{{name: "meta.go", jf: pkgFile}}

	predsFile := jen.NewFile(pkgName)
	predsFile.Add(newPredicates(schema))
	fls = append(fls, &File{
		name: "predicates.go",
		jf:   predsFile,
	})

	repoFile := jen.NewFile(pkgName)
	repoFile.Add(newRepository(schema))
	fls = append(fls, &File{
		name: "repository.go",
		jf:   repoFile,
	})

	creatorFile := jen.NewFile(pkgName)
	creatorFile.Add(newCreator(schema))
	fls = append(fls, &File{
		name: "creator.go",
		jf:   creatorFile,
	})

	queryerFile := jen.NewFile(pkgName)
	queryerFile.Add(newQueryer(schema))
	fls = append(fls, &File{
		name: "queryer.go",
		jf:   queryerFile,
	})

	updaterFile := jen.NewFile(pkgName)
	updaterFile.Add(newUpdater(schema))
	fls = append(fls, &File{
		name: "updater.go",
		jf:   updaterFile,
	})

	deleterFile := jen.NewFile(pkgName)
	deleterFile.Add(newDeleter())
	fls = append(fls, &File{
		name: "deleter.go",
		jf:   deleterFile,
	})

	// sqlite repository implementation
	sqliteRepoFile := jen.NewFile(pkgName)
	sqliteRepoFile.Anon("github.com/mattn/go-sqlite3")
	sqliteRepoFile.Add(sqlite.NewSQLiteRepoC(schema))
	fls = append(fls, &File{
		name: "sqlite_repository.go",
		jf:   sqliteRepoFile,
	})

	// postgres repository implementation
	pgRepoFile := jen.NewFile(pkgName)
	pgRepoFile.Anon("github.com/lib/pq")
	pgRepoFile.Add(pg.NewPGRepoC(schema))
	fls = append(fls, &File{
		name: "pg_repository.go",
		jf:   pgRepoFile,
	})

	for i, fl := range fls {
		fl.jf.PackageComment(header)
		fl.jf.ImportAlias(sqPkg, "sq")

		buff := &bytes.Buffer{}
		err = fl.jf.Render(buff)
		if err != nil {
			return nil, errors.Wrap(err, "render jen file")
		}

		fls[i].buff = buff
	}

	return fls, nil
}

func camel(s string) string {
	return strcase.ToCamel(s)
}
